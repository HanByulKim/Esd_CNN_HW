-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_Accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv_Accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv_Accel,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.550000,HLS_SYN_LAT=3460202,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=6,HLS_SYN_FF=1125,HLS_SYN_LUT=1784}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component Conv_Accel_wrapped_conv_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Conv_Accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Conv_Accel_CONTROL_BUS_s_axi_U : component Conv_Accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_Conv_Accel_wrapped_conv_hw_fu_48 : component Conv_Accel_wrapped_conv_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start,
        ap_done => grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done,
        ap_idle => grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle,
        ap_ready => grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready,
        INPUT_STREAM_TDATA => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST,
        OUTPUT_STREAM_TDATA => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg assign process. --
    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready)) then 
                    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    INPUT_STREAM_TREADY <= grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY;
    OUTPUT_STREAM_TDATA <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA <= INPUT_STREAM_TDATA;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST <= INPUT_STREAM_TDEST;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID <= INPUT_STREAM_TID;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP <= INPUT_STREAM_TKEEP;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST <= INPUT_STREAM_TLAST;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB <= INPUT_STREAM_TSTRB;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER <= INPUT_STREAM_TUSER;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID <= INPUT_STREAM_TVALID;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY <= OUTPUT_STREAM_TREADY;
    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start <= grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg;
end behav;
