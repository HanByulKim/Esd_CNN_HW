// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv_Accel,hls_ip_2015_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.550000,HLS_SYN_LAT=3460202,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=6,HLS_SYN_FF=1125,HLS_SYN_LUT=1784}" *)

module Conv_Accel (
        ap_clk,
        ap_rst_n,
        INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST,
        INPUT_STREAM_TID,
        INPUT_STREAM_TDEST,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (C_S_AXI_CONTROL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_STREAM_TDATA;
input   INPUT_STREAM_TVALID;
output   INPUT_STREAM_TREADY;
input  [3:0] INPUT_STREAM_TKEEP;
input  [3:0] INPUT_STREAM_TSTRB;
input  [3:0] INPUT_STREAM_TUSER;
input  [0:0] INPUT_STREAM_TLAST;
input  [4:0] INPUT_STREAM_TID;
input  [4:0] INPUT_STREAM_TDEST;
output  [31:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [3:0] OUTPUT_STREAM_TKEEP;
output  [3:0] OUTPUT_STREAM_TSTRB;
output  [3:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [4:0] OUTPUT_STREAM_TID;
output  [4:0] OUTPUT_STREAM_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1 : 0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg    ap_ready;
wire    Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready;
wire   [31:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER;
wire   [0:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST;
wire   [4:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID;
wire   [4:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST;
wire   [31:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID;
wire    grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB;
wire   [3:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER;
wire   [0:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST;
wire   [4:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID;
wire   [4:0] grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST;
reg    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_115;
reg   [1:0] ap_NS_fsm;


Conv_Accel_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
Conv_Accel_CONTROL_BUS_s_axi_U(
    .AWVALID( s_axi_CONTROL_BUS_AWVALID ),
    .AWREADY( s_axi_CONTROL_BUS_AWREADY ),
    .AWADDR( s_axi_CONTROL_BUS_AWADDR ),
    .WVALID( s_axi_CONTROL_BUS_WVALID ),
    .WREADY( s_axi_CONTROL_BUS_WREADY ),
    .WDATA( s_axi_CONTROL_BUS_WDATA ),
    .WSTRB( s_axi_CONTROL_BUS_WSTRB ),
    .ARVALID( s_axi_CONTROL_BUS_ARVALID ),
    .ARREADY( s_axi_CONTROL_BUS_ARREADY ),
    .ARADDR( s_axi_CONTROL_BUS_ARADDR ),
    .RVALID( s_axi_CONTROL_BUS_RVALID ),
    .RREADY( s_axi_CONTROL_BUS_RREADY ),
    .RDATA( s_axi_CONTROL_BUS_RDATA ),
    .RRESP( s_axi_CONTROL_BUS_RRESP ),
    .BVALID( s_axi_CONTROL_BUS_BVALID ),
    .BREADY( s_axi_CONTROL_BUS_BREADY ),
    .BRESP( s_axi_CONTROL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle )
);

Conv_Accel_wrapped_conv_hw grp_Conv_Accel_wrapped_conv_hw_fu_48(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start ),
    .ap_done( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done ),
    .ap_idle( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle ),
    .ap_ready( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready ),
    .INPUT_STREAM_TDATA( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA ),
    .INPUT_STREAM_TVALID( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID ),
    .INPUT_STREAM_TREADY( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY ),
    .INPUT_STREAM_TKEEP( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP ),
    .INPUT_STREAM_TSTRB( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB ),
    .INPUT_STREAM_TUSER( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER ),
    .INPUT_STREAM_TLAST( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST ),
    .INPUT_STREAM_TID( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID ),
    .INPUT_STREAM_TDEST( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST ),
    .OUTPUT_STREAM_TDATA( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA ),
    .OUTPUT_STREAM_TVALID( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID ),
    .OUTPUT_STREAM_TREADY( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY ),
    .OUTPUT_STREAM_TKEEP( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP ),
    .OUTPUT_STREAM_TSTRB( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB ),
    .OUTPUT_STREAM_TUSER( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER ),
    .OUTPUT_STREAM_TLAST( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST ),
    .OUTPUT_STREAM_TID( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID ),
    .OUTPUT_STREAM_TDEST( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk) begin : ap_ret_grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg
    if (ap_rst_n_inv == 1'b1) begin
        grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready)) begin
            grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// ap_done assign process. ///
always @ (grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20) begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_115) begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign INPUT_STREAM_TREADY = grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY;
assign OUTPUT_STREAM_TDATA = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA;
assign OUTPUT_STREAM_TDEST = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST;
assign OUTPUT_STREAM_TID = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID;
assign OUTPUT_STREAM_TKEEP = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP;
assign OUTPUT_STREAM_TLAST = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST;
assign OUTPUT_STREAM_TSTRB = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB;
assign OUTPUT_STREAM_TUSER = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER;
assign OUTPUT_STREAM_TVALID = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm) begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA = INPUT_STREAM_TDATA;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST = INPUT_STREAM_TDEST;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID = INPUT_STREAM_TID;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP = INPUT_STREAM_TKEEP;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST = INPUT_STREAM_TLAST;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB = INPUT_STREAM_TSTRB;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER = INPUT_STREAM_TUSER;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID = INPUT_STREAM_TVALID;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY = OUTPUT_STREAM_TREADY;
assign grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg;


endmodule //Conv_Accel

