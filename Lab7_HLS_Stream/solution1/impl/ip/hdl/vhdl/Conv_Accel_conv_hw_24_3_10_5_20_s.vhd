-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.3
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_Accel_conv_hw_24_3_10_5_20_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    filter_ce0 : OUT STD_LOGIC;
    filter_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    feature_map_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    feature_map_ce0 : OUT STD_LOGIC;
    feature_map_we0 : OUT STD_LOGIC;
    feature_map_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    feature_map_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv_Accel_conv_hw_24_3_10_5_20_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal filt_4_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal filt_4_reg_698 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_77 : BOOLEAN;
    signal tmp_38_fu_269_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_716 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal tmp_44_fu_316_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_44_reg_721 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_reg_729 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_108 : BOOLEAN;
    signal tmp_50_fu_338_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_reg_734 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond6_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal filt_5_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal filt_5_reg_742 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal tmp_49_cast_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_cast_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_reg_752 : STD_LOGIC_VECTOR (8 downto 0);
    signal ch_3_fu_413_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_3_reg_760 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_138 : BOOLEAN;
    signal tmp_59_cast_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_cast_reg_765 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_reg_770 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal tmp_53_fu_525_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_53_reg_783 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_537_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_791 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_168 : BOOLEAN;
    signal feature_map_addr_1_reg_796 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lt_i_1_fu_567_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lt_i_1_reg_804 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal tmp_58_fu_604_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_58_reg_809 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_639_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_reg_814 : STD_LOGIC_VECTOR (11 downto 0);
    signal lt_j_1_fu_655_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lt_j_1_reg_822 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal exitcond_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_223 : BOOLEAN;
    signal feature_map_load_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal filt_reg_117 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_255 : BOOLEAN;
    signal filt1_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal ch_reg_161 : STD_LOGIC_VECTOR (1 downto 0);
    signal i2_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal j3_reg_184 : STD_LOGIC_VECTOR (4 downto 0);
    signal lt_i_reg_196 : STD_LOGIC_VECTOR (2 downto 0);
    signal lt_j_reg_207 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal tmp_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_301 : BOOLEAN;
    signal tmp_s_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_257_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_265_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_253_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_cast_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_fu_291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_fu_304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_296_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_312_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_cast_fu_334_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_fu_363_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_375_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_359_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast1_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_fu_423_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_fu_435_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl8_cast_fu_431_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_443_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_cast_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_cast_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl7_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_513_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_505_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl11_cast_fu_521_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_cast_fu_543_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_fu_547_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lt_i_cast4_fu_557_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_592_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_596_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_588_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_573_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_cast_fu_610_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_614_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_619_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_cast_fu_623_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl13_cast_fu_631_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_cast_fu_661_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_665_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lt_j_cast2_fu_645_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_675_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_cast_fu_681_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_fu_685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_218_ce : STD_LOGIC;
    signal grp_fu_222_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component Conv_Accel_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_Accel_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Conv_Accel_fadd_32ns_32ns_32_5_full_dsp_U0 : component Conv_Accel_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => feature_map_load_reg_852,
        din1 => tmp_28_reg_847,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p2);

    Conv_Accel_fmul_32ns_32ns_32_4_max_dsp_U1 : component Conv_Accel_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filter_q0,
        din1 => image_r_q0,
        ce => grp_fu_222_ce,
        dout => grp_fu_222_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ch_reg_161 assign process. --
    ch_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond3_fu_484_p2)))) then 
                ch_reg_161 <= ch_3_reg_760;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond5_fu_347_p2))) then 
                ch_reg_161 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- filt1_reg_150 assign process. --
    filt1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = exitcond4_fu_407_p2)))) then 
                filt1_reg_150 <= filt_5_reg_742;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond8_fu_228_p2 = ap_const_lv1_0)))) then 
                filt1_reg_150 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- filt_reg_117 assign process. --
    filt_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond7_fu_275_p2)))) then 
                filt_reg_117 <= filt_4_reg_698;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                filt_reg_117 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i2_reg_172 assign process. --
    i2_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond2_fu_531_p2)))) then 
                i2_reg_172 <= i_5_reg_778;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond4_fu_407_p2))) then 
                i2_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_128 assign process. --
    i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond6_fu_322_p2)))) then 
                i_reg_128 <= i_4_reg_716;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond8_fu_228_p2 = ap_const_lv1_0))) then 
                i_reg_128 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j3_reg_184 assign process. --
    j3_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond1_fu_561_p2)))) then 
                j3_reg_184 <= j_5_reg_791;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond3_fu_484_p2))) then 
                j3_reg_184 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_139 assign process. --
    j_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond7_fu_275_p2))) then 
                j_reg_139 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_reg_139 <= j_4_reg_729;
            end if; 
        end if;
    end process;

    -- lt_i_reg_196 assign process. --
    lt_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_649_p2)))) then 
                lt_i_reg_196 <= lt_i_1_reg_804;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond2_fu_531_p2))) then 
                lt_i_reg_196 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- lt_j_reg_207 assign process. --
    lt_j_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond1_fu_561_p2))) then 
                lt_j_reg_207 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                lt_j_reg_207 <= lt_j_1_reg_822;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond8_fu_228_p2 = ap_const_lv1_0))) then
                bias_addr_reg_708 <= tmp_fu_240_p1(4 - 1 downto 0);
                    tmp_38_reg_703(8 downto 2) <= tmp_38_fu_269_p2(8 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                ch_3_reg_760 <= ch_3_fu_413_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond2_fu_531_p2))) then
                feature_map_addr_1_reg_796 <= tmp_68_cast_fu_552_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                feature_map_load_reg_852 <= feature_map_q0;
                tmp_28_reg_847 <= grp_fu_222_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                filt_4_reg_698 <= filt_4_fu_234_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                filt_5_reg_742 <= filt_5_fu_353_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_4_reg_716 <= i_4_fu_281_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                i_5_reg_778 <= i_5_fu_490_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_4_reg_729 <= j_4_fu_328_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                j_5_reg_791 <= j_5_fu_537_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                lt_i_1_reg_804 <= lt_i_1_fu_567_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                lt_j_1_reg_822 <= lt_j_1_fu_655_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_29_reg_857 <= grp_fu_218_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond5_fu_347_p2))) then
                    tmp_42_reg_752(8 downto 2) <= tmp_42_fu_401_p2(8 downto 2);
                tmp_49_cast_reg_747 <= tmp_49_cast_fu_385_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond7_fu_275_p2))) then
                    tmp_44_reg_721(12 downto 2) <= tmp_44_fu_316_p2(12 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = exitcond4_fu_407_p2))) then
                tmp_49_reg_770 <= tmp_49_fu_478_p2;
                    tmp_59_cast_reg_765(8 downto 3) <= tmp_59_cast_fu_453_p1(8 downto 3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond6_fu_322_p2))) then
                tmp_50_reg_734 <= tmp_50_fu_338_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond3_fu_484_p2))) then
                    tmp_53_reg_783(12 downto 2) <= tmp_53_fu_525_p2(12 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond1_fu_561_p2))) then
                tmp_58_reg_809 <= tmp_58_fu_604_p2;
                    tmp_61_reg_814(11 downto 3) <= tmp_61_fu_639_p2(11 downto 3);
            end if;
        end if;
    end process;
    tmp_38_reg_703(1 downto 0) <= "00";
    tmp_44_reg_721(1 downto 0) <= "00";
    tmp_42_reg_752(1 downto 0) <= "00";
    tmp_59_cast_reg_765(2 downto 0) <= "000";
    tmp_53_reg_783(1 downto 0) <= "00";
    tmp_61_reg_814(2 downto 0) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond8_fu_228_p2, exitcond7_fu_275_p2, exitcond6_fu_322_p2, exitcond5_fu_347_p2, exitcond4_fu_407_p2, exitcond3_fu_484_p2, exitcond2_fu_531_p2, exitcond1_fu_561_p2, exitcond_fu_649_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond8_fu_228_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond7_fu_275_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond6_fu_322_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_347_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond4_fu_407_p2)) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st8_fsm_7 => 
                if ((ap_const_lv1_0 = exitcond3_fu_484_p2)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st9_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond2_fu_531_p2)) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st10_fsm_9 => 
                if ((ap_const_lv1_0 = exitcond1_fu_561_p2)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st11_fsm_10 => 
                if ((ap_const_lv1_0 = exitcond_fu_649_p2)) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_5, exitcond5_fu_347_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond5_fu_347_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, exitcond5_fu_347_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond5_fu_347_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_108 assign process. --
    ap_sig_bdd_108_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_108 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_138 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_168 assign process. --
    ap_sig_bdd_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_168 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_223 assign process. --
    ap_sig_bdd_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_223 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_255 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_301 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_77 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_301)
    begin
        if (ap_sig_bdd_301) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_223)
    begin
        if (ap_sig_bdd_223) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_77)
    begin
        if (ap_sig_bdd_77) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_108)
    begin
        if (ap_sig_bdd_108) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_255)
    begin
        if (ap_sig_bdd_255) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_168)
    begin
        if (ap_sig_bdd_168) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_708;

    -- bias_ce0 assign process. --
    bias_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ch_3_fu_413_p2 <= std_logic_vector(unsigned(ch_reg_161) + unsigned(ap_const_lv2_1));
    exitcond1_fu_561_p2 <= "1" when (lt_i_reg_196 = ap_const_lv3_5) else "0";
    exitcond2_fu_531_p2 <= "1" when (j3_reg_184 = ap_const_lv5_14) else "0";
    exitcond3_fu_484_p2 <= "1" when (i2_reg_172 = ap_const_lv5_14) else "0";
    exitcond4_fu_407_p2 <= "1" when (ch_reg_161 = ap_const_lv2_3) else "0";
    exitcond5_fu_347_p2 <= "1" when (filt1_reg_150 = ap_const_lv4_A) else "0";
    exitcond6_fu_322_p2 <= "1" when (j_reg_139 = ap_const_lv5_14) else "0";
    exitcond7_fu_275_p2 <= "1" when (i_reg_128 = ap_const_lv5_14) else "0";
    exitcond8_fu_228_p2 <= "1" when (filt_reg_117 = ap_const_lv4_A) else "0";
    exitcond_fu_649_p2 <= "1" when (lt_j_reg_207 = ap_const_lv3_5) else "0";

    -- feature_map_address0 assign process. --
    feature_map_address0_assign_proc : process(feature_map_addr_1_reg_796, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st21_fsm_20, tmp_63_cast_fu_343_p1, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            feature_map_address0 <= tmp_63_cast_fu_343_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            feature_map_address0 <= feature_map_addr_1_reg_796;
        else 
            feature_map_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- feature_map_ce0 assign process. --
    feature_map_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            feature_map_ce0 <= ap_const_logic_1;
        else 
            feature_map_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- feature_map_d0 assign process. --
    feature_map_d0_assign_proc : process(bias_q0, tmp_29_reg_857, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            feature_map_d0 <= tmp_29_reg_857;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            feature_map_d0 <= bias_q0;
        else 
            feature_map_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- feature_map_we0 assign process. --
    feature_map_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            feature_map_we0 <= ap_const_logic_1;
        else 
            feature_map_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_4_fu_234_p2 <= std_logic_vector(unsigned(filt_reg_117) + unsigned(ap_const_lv4_1));
    filt_5_fu_353_p2 <= std_logic_vector(unsigned(filt1_reg_150) + unsigned(ap_const_lv4_1));
    filter_address0 <= tmp_76_cast_fu_670_p1(10 - 1 downto 0);

    -- filter_ce0 assign process. --
    filter_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            filter_ce0 <= ap_const_logic_1;
        else 
            filter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_218_ce <= ap_const_logic_1;
    grp_fu_222_ce <= ap_const_logic_1;
    i_4_fu_281_p2 <= std_logic_vector(unsigned(i_reg_128) + unsigned(ap_const_lv5_1));
    i_5_fu_490_p2 <= std_logic_vector(unsigned(i2_reg_172) + unsigned(ap_const_lv5_1));
    image_r_address0 <= tmp_77_cast_fu_690_p1(11 - 1 downto 0);

    -- image_r_ce0 assign process. --
    image_r_ce0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_328_p2 <= std_logic_vector(unsigned(j_reg_139) + unsigned(ap_const_lv5_1));
    j_5_fu_537_p2 <= std_logic_vector(unsigned(j3_reg_184) + unsigned(ap_const_lv5_1));
    lt_i_1_fu_567_p2 <= std_logic_vector(unsigned(lt_i_reg_196) + unsigned(ap_const_lv3_1));
    lt_i_cast4_fu_557_p1 <= std_logic_vector(resize(unsigned(lt_i_reg_196),5));
    lt_j_1_fu_655_p2 <= std_logic_vector(unsigned(lt_j_reg_207) + unsigned(ap_const_lv3_1));
    lt_j_cast2_fu_645_p1 <= std_logic_vector(resize(unsigned(lt_j_reg_207),5));
    p_shl10_cast_fu_505_p3 <= (tmp_51_fu_500_p2 & ap_const_lv4_0);
    p_shl11_cast_fu_521_p1 <= std_logic_vector(resize(unsigned(tmp_52_fu_513_p3),13));
    p_shl12_cast_fu_623_p3 <= (tmp_60_fu_619_p1 & ap_const_lv5_0);
    p_shl13_cast_fu_631_p3 <= (tmp_59_fu_614_p2 & ap_const_lv3_0);
    p_shl14_cast_fu_596_p3 <= (tmp_57_fu_592_p1 & ap_const_lv2_0);
    p_shl1_cast_fu_265_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_257_p3),9));
    p_shl2_cast_fu_296_p3 <= (tmp_43_fu_291_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_312_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_304_p3),13));
    p_shl4_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_389_p3),9));
    p_shl6_cast1_fu_371_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_363_p3),9));
    p_shl6_cast_fu_375_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_363_p3),7));
        p_shl7_fu_474_p1 <= std_logic_vector(resize(signed(tmp_36_fu_466_p3),64));

    p_shl8_cast_fu_431_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_423_p3),8));
    p_shl9_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_435_p3),8));
    p_shl_cast_fu_253_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_245_p3),9));
    tmp_17_cast_fu_287_p1 <= std_logic_vector(resize(unsigned(i_reg_128),9));
    tmp_18_cast_fu_419_p1 <= std_logic_vector(resize(unsigned(ch_reg_161),8));
    tmp_19_cast_fu_334_p1 <= std_logic_vector(resize(unsigned(j_reg_139),13));
    tmp_20_cast_fu_496_p1 <= std_logic_vector(resize(unsigned(i2_reg_172),9));
    tmp_21_cast_fu_543_p1 <= std_logic_vector(resize(unsigned(j3_reg_184),13));
    tmp_22_fu_573_p2 <= std_logic_vector(unsigned(i2_reg_172) + unsigned(lt_i_cast4_fu_557_p1));
    tmp_23_fu_579_p1 <= std_logic_vector(resize(unsigned(lt_i_reg_196),64));
    tmp_24_cast_fu_610_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_573_p2),9));
    tmp_25_cast_fu_661_p1 <= std_logic_vector(resize(unsigned(lt_j_reg_207),11));
    tmp_26_fu_675_p2 <= std_logic_vector(unsigned(lt_j_cast2_fu_645_p1) + unsigned(j3_reg_184));
    tmp_27_cast_fu_681_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_675_p2),12));
    tmp_35_fu_304_p3 <= (tmp_43_fu_291_p2 & ap_const_lv2_0);
    tmp_36_fu_466_p3 <= (tmp_48_fu_457_p2 & ap_const_lv2_0);
    tmp_37_fu_257_p3 <= (filt_reg_117 & ap_const_lv2_0);
    tmp_38_fu_269_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_265_p1) + unsigned(p_shl_cast_fu_253_p1));
    tmp_39_fu_363_p3 <= (filt1_reg_150 & ap_const_lv2_0);
    tmp_40_fu_379_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_375_p1) - unsigned(tmp_cast_fu_359_p1));
    tmp_41_fu_389_p3 <= (filt1_reg_150 & ap_const_lv4_0);
    tmp_42_fu_401_p2 <= std_logic_vector(unsigned(p_shl6_cast1_fu_371_p1) + unsigned(p_shl4_cast_fu_397_p1));
    tmp_43_fu_291_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_287_p1) + unsigned(tmp_38_reg_703));
    tmp_44_fu_316_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_296_p3) + unsigned(p_shl3_cast_fu_312_p1));
    tmp_45_fu_423_p3 <= (ch_reg_161 & ap_const_lv5_0);
    tmp_46_fu_435_p3 <= (ch_reg_161 & ap_const_lv3_0);
    tmp_47_fu_447_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_431_p1) - unsigned(p_shl9_cast_fu_443_p1));
    tmp_48_fu_457_p2 <= std_logic_vector(signed(tmp_49_cast_reg_747) + signed(tmp_18_cast_fu_419_p1));
        tmp_49_cast_fu_385_p1 <= std_logic_vector(resize(signed(tmp_40_fu_379_p2),8));

    tmp_49_fu_478_p2 <= std_logic_vector(signed(tmp_60_cast_fu_462_p1) + signed(p_shl7_fu_474_p1));
    tmp_50_fu_338_p2 <= std_logic_vector(unsigned(tmp_44_reg_721) + unsigned(tmp_19_cast_fu_334_p1));
    tmp_51_fu_500_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_496_p1) + unsigned(tmp_42_reg_752));
    tmp_52_fu_513_p3 <= (tmp_51_fu_500_p2 & ap_const_lv2_0);
    tmp_53_fu_525_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_505_p3) + unsigned(p_shl11_cast_fu_521_p1));
    tmp_54_fu_547_p2 <= std_logic_vector(unsigned(tmp_53_reg_783) + unsigned(tmp_21_cast_fu_543_p1));
    tmp_55_fu_583_p2 <= std_logic_vector(unsigned(tmp_23_fu_579_p1) + unsigned(tmp_49_reg_770));
    tmp_56_fu_588_p1 <= tmp_55_fu_583_p2(11 - 1 downto 0);
    tmp_57_fu_592_p1 <= tmp_55_fu_583_p2(9 - 1 downto 0);
    tmp_58_fu_604_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_596_p3) + unsigned(tmp_56_fu_588_p1));
        tmp_59_cast_fu_453_p1 <= std_logic_vector(resize(signed(tmp_47_fu_447_p2),9));

    tmp_59_fu_614_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_610_p1) + unsigned(tmp_59_cast_reg_765));
        tmp_60_cast_fu_462_p1 <= std_logic_vector(resize(signed(tmp_48_fu_457_p2),64));

    tmp_60_fu_619_p1 <= tmp_59_fu_614_p2(7 - 1 downto 0);
    tmp_61_fu_639_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_623_p3) - unsigned(p_shl13_cast_fu_631_p3));
    tmp_62_fu_665_p2 <= std_logic_vector(unsigned(tmp_58_reg_809) + unsigned(tmp_25_cast_fu_661_p1));
    tmp_63_cast_fu_343_p1 <= std_logic_vector(resize(unsigned(tmp_50_reg_734),64));
    tmp_63_fu_685_p2 <= std_logic_vector(unsigned(tmp_61_reg_814) + unsigned(tmp_27_cast_fu_681_p1));
    tmp_68_cast_fu_552_p1 <= std_logic_vector(resize(unsigned(tmp_54_fu_547_p2),64));
    tmp_76_cast_fu_670_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_665_p2),64));
    tmp_77_cast_fu_690_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_685_p2),64));
    tmp_cast_fu_359_p1 <= std_logic_vector(resize(unsigned(filt1_reg_150),7));
    tmp_fu_240_p1 <= std_logic_vector(resize(unsigned(filt_reg_117),64));
    tmp_s_fu_245_p3 <= (filt_reg_117 & ap_const_lv4_0);
end behav;
