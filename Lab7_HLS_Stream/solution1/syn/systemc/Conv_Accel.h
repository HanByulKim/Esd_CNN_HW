// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _Conv_Accel_HH_
#define _Conv_Accel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Conv_Accel_wrapped_conv_hw.h"
#include "Conv_Accel_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct Conv_Accel : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > INPUT_STREAM_TDATA;
    sc_in< sc_logic > INPUT_STREAM_TVALID;
    sc_out< sc_logic > INPUT_STREAM_TREADY;
    sc_in< sc_lv<4> > INPUT_STREAM_TKEEP;
    sc_in< sc_lv<4> > INPUT_STREAM_TSTRB;
    sc_in< sc_lv<4> > INPUT_STREAM_TUSER;
    sc_in< sc_lv<1> > INPUT_STREAM_TLAST;
    sc_in< sc_lv<5> > INPUT_STREAM_TID;
    sc_in< sc_lv<5> > INPUT_STREAM_TDEST;
    sc_out< sc_lv<32> > OUTPUT_STREAM_TDATA;
    sc_out< sc_logic > OUTPUT_STREAM_TVALID;
    sc_in< sc_logic > OUTPUT_STREAM_TREADY;
    sc_out< sc_lv<4> > OUTPUT_STREAM_TKEEP;
    sc_out< sc_lv<4> > OUTPUT_STREAM_TSTRB;
    sc_out< sc_lv<4> > OUTPUT_STREAM_TUSER;
    sc_out< sc_lv<1> > OUTPUT_STREAM_TLAST;
    sc_out< sc_lv<5> > OUTPUT_STREAM_TID;
    sc_out< sc_lv<5> > OUTPUT_STREAM_TDEST;
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    Conv_Accel(sc_module_name name);
    SC_HAS_PROCESS(Conv_Accel);

    ~Conv_Accel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Conv_Accel_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* Conv_Accel_CONTROL_BUS_s_axi_U;
    Conv_Accel_wrapped_conv_hw* grp_Conv_Accel_wrapped_conv_hw_fu_48;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready;
    sc_signal< sc_lv<32> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER;
    sc_signal< sc_lv<1> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST;
    sc_signal< sc_lv<5> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID;
    sc_signal< sc_lv<5> > grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST;
    sc_signal< sc_lv<32> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB;
    sc_signal< sc_lv<4> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER;
    sc_signal< sc_lv<1> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST;
    sc_signal< sc_lv<5> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID;
    sc_signal< sc_lv<5> > grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST;
    sc_signal< sc_logic > grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_115;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce();
    void thread_INPUT_STREAM_TREADY();
    void thread_OUTPUT_STREAM_TDATA();
    void thread_OUTPUT_STREAM_TDEST();
    void thread_OUTPUT_STREAM_TID();
    void thread_OUTPUT_STREAM_TKEEP();
    void thread_OUTPUT_STREAM_TLAST();
    void thread_OUTPUT_STREAM_TSTRB();
    void thread_OUTPUT_STREAM_TUSER();
    void thread_OUTPUT_STREAM_TVALID();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_115();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY();
    void thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
