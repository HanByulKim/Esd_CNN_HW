// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.3
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "Conv_Accel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Conv_Accel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Conv_Accel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Conv_Accel::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> Conv_Accel::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> Conv_Accel::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Conv_Accel::ap_const_lv1_1 = "1";
const int Conv_Accel::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> Conv_Accel::ap_const_lv32_1 = "1";

Conv_Accel::Conv_Accel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Conv_Accel_CONTROL_BUS_s_axi_U = new Conv_Accel_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("Conv_Accel_CONTROL_BUS_s_axi_U");
    Conv_Accel_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    Conv_Accel_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    Conv_Accel_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    Conv_Accel_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    Conv_Accel_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    Conv_Accel_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    Conv_Accel_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    Conv_Accel_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    Conv_Accel_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    Conv_Accel_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    Conv_Accel_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    Conv_Accel_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    Conv_Accel_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    Conv_Accel_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    Conv_Accel_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    Conv_Accel_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    Conv_Accel_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    Conv_Accel_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    Conv_Accel_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    Conv_Accel_CONTROL_BUS_s_axi_U->ACLK_EN(Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce);
    Conv_Accel_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    Conv_Accel_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    Conv_Accel_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    Conv_Accel_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    Conv_Accel_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    grp_Conv_Accel_wrapped_conv_hw_fu_48 = new Conv_Accel_wrapped_conv_hw("grp_Conv_Accel_wrapped_conv_hw_fu_48");
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_clk(ap_clk);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_rst(ap_rst_n_inv);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_start(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_done(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_idle(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->ap_ready(grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TDATA(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TVALID(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TREADY(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TKEEP(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TSTRB(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TUSER(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TLAST(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TID(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->INPUT_STREAM_TDEST(grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TDATA(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TVALID(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TREADY(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TKEEP(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TSTRB(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TUSER(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TLAST(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TID(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID);
    grp_Conv_Accel_wrapped_conv_hw_fu_48->OUTPUT_STREAM_TDEST(grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_INPUT_STREAM_TREADY);
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TDATA);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TDEST);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TID);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TKEEP);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TLAST);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TSTRB);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TUSER);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_OUTPUT_STREAM_TVALID);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_115);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_115 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA);
    sensitive << ( INPUT_STREAM_TDATA );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST);
    sensitive << ( INPUT_STREAM_TDEST );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID);
    sensitive << ( INPUT_STREAM_TID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP);
    sensitive << ( INPUT_STREAM_TKEEP );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST);
    sensitive << ( INPUT_STREAM_TLAST );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB);
    sensitive << ( INPUT_STREAM_TSTRB );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER);
    sensitive << ( INPUT_STREAM_TUSER );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID);
    sensitive << ( INPUT_STREAM_TVALID );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY);
    sensitive << ( OUTPUT_STREAM_TREADY );

    SC_METHOD(thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start);
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Conv_Accel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, INPUT_STREAM_TDATA, "(port)INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, INPUT_STREAM_TVALID, "(port)INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, INPUT_STREAM_TREADY, "(port)INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, INPUT_STREAM_TKEEP, "(port)INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, INPUT_STREAM_TSTRB, "(port)INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, INPUT_STREAM_TUSER, "(port)INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, INPUT_STREAM_TLAST, "(port)INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, INPUT_STREAM_TID, "(port)INPUT_STREAM_TID");
    sc_trace(mVcdFile, INPUT_STREAM_TDEST, "(port)INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDATA, "(port)OUTPUT_STREAM_TDATA");
    sc_trace(mVcdFile, OUTPUT_STREAM_TVALID, "(port)OUTPUT_STREAM_TVALID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TREADY, "(port)OUTPUT_STREAM_TREADY");
    sc_trace(mVcdFile, OUTPUT_STREAM_TKEEP, "(port)OUTPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, OUTPUT_STREAM_TSTRB, "(port)OUTPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, OUTPUT_STREAM_TUSER, "(port)OUTPUT_STREAM_TUSER");
    sc_trace(mVcdFile, OUTPUT_STREAM_TLAST, "(port)OUTPUT_STREAM_TLAST");
    sc_trace(mVcdFile, OUTPUT_STREAM_TID, "(port)OUTPUT_STREAM_TID");
    sc_trace(mVcdFile, OUTPUT_STREAM_TDEST, "(port)OUTPUT_STREAM_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce, "Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start, "grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done, "grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle, "grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_idle");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready, "grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST, "grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST, "grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST");
    sc_trace(mVcdFile, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg, "grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_115, "ap_sig_bdd_115");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Conv_Accel.hdltvin.dat");
    mHdltvoutHandle.open("Conv_Accel.hdltvout.dat");
}

Conv_Accel::~Conv_Accel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Conv_Accel_CONTROL_BUS_s_axi_U;
    delete grp_Conv_Accel_wrapped_conv_hw_fu_48;
}

void Conv_Accel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_ready.read())) {
            grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg = ap_const_logic_0;
        }
    }
}

void Conv_Accel::thread_Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce() {
    Conv_Accel_CONTROL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void Conv_Accel::thread_INPUT_STREAM_TREADY() {
    INPUT_STREAM_TREADY = grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TREADY.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TDATA() {
    OUTPUT_STREAM_TDATA = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDATA.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TDEST() {
    OUTPUT_STREAM_TDEST = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TDEST.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TID() {
    OUTPUT_STREAM_TID = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TID.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TKEEP() {
    OUTPUT_STREAM_TKEEP = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TKEEP.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TLAST() {
    OUTPUT_STREAM_TLAST = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TLAST.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TSTRB() {
    OUTPUT_STREAM_TSTRB = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TSTRB.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TUSER() {
    OUTPUT_STREAM_TUSER = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TUSER.read();
}

void Conv_Accel::thread_OUTPUT_STREAM_TVALID() {
    OUTPUT_STREAM_TVALID = grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TVALID.read();
}

void Conv_Accel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Conv_Accel::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Conv_Accel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Conv_Accel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Conv_Accel::thread_ap_sig_bdd_115() {
    ap_sig_bdd_115 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void Conv_Accel::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void Conv_Accel::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void Conv_Accel::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_115.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDATA = INPUT_STREAM_TDATA.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TDEST = INPUT_STREAM_TDEST.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TID = INPUT_STREAM_TID.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TKEEP = INPUT_STREAM_TKEEP.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TLAST = INPUT_STREAM_TLAST.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TSTRB = INPUT_STREAM_TSTRB.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TUSER = INPUT_STREAM_TUSER.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_INPUT_STREAM_TVALID = INPUT_STREAM_TVALID.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_OUTPUT_STREAM_TREADY = OUTPUT_STREAM_TREADY.read();
}

void Conv_Accel::thread_grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start() {
    grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start = grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_start_ap_start_reg.read();
}

void Conv_Accel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_Conv_Accel_wrapped_conv_hw_fu_48_ap_done.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void Conv_Accel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDATA\" :  \"" << INPUT_STREAM_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TVALID\" :  \"" << INPUT_STREAM_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"INPUT_STREAM_TREADY\" :  \"" << INPUT_STREAM_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TKEEP\" :  \"" << INPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TSTRB\" :  \"" << INPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TUSER\" :  \"" << INPUT_STREAM_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TLAST\" :  \"" << INPUT_STREAM_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TID\" :  \"" << INPUT_STREAM_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_STREAM_TDEST\" :  \"" << INPUT_STREAM_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDATA\" :  \"" << OUTPUT_STREAM_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TVALID\" :  \"" << OUTPUT_STREAM_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUTPUT_STREAM_TREADY\" :  \"" << OUTPUT_STREAM_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TKEEP\" :  \"" << OUTPUT_STREAM_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TSTRB\" :  \"" << OUTPUT_STREAM_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TUSER\" :  \"" << OUTPUT_STREAM_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TLAST\" :  \"" << OUTPUT_STREAM_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TID\" :  \"" << OUTPUT_STREAM_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_STREAM_TDEST\" :  \"" << OUTPUT_STREAM_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

